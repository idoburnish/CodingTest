[[ 배열의 생성과 선언]]

int [] score = new int[5]; 아니면 int score [] = new int[5]; //배열의 생성과 선언을 동시에

[[ 배열의 길이 ]]

배열이름.length(int형 상수)

int[] arr = new int[5];
int tmp = arr.length; 
 - 배열은 한번 생성하면 그 길이를 바꿀 수 없다.
 
 [[ 배열의 초기화 ]]
 
 int[] score = new int[5];
 score[0] = 50;
 score[1] = 60;
 
 int[] score = {50,60,70,80,90}; ( int[] score; score = {50,60,70,80,90}; 은 불가능)
 
 [[ 배열의 출력 ]]
 
 int[] iArr = {100, 95, 80, 70, 60};
 System.out.println(iArr); // Ia14318bb와 같은 형식의 배열의 주소값 출력
 --> System.out.println(Arrays.toString(iArr));// Arrays클래스에 있는 toString 메소드 사용하면 [100,95,80,70,60] 이 출력됨
 * 자동으로 import문 추가 : ctrl+shift+o
char[] chArr = {'a','b','c','d'};
 System.out.println(chArr); //abcd가 출력된다.
 
  *random값 배열에 넣기
   int[] iArr2 = new int[10];
   for(int i = 0 ;i<iArr2.length;i++){
      iArr2[i] = (int)(Math.random()*10)+1; //1~10값을 배열에 저장
    }

[[ String 배열 ]]

String[] name = new String[3] // 3개의 문자열을 담을 수 있는 배열을 생성, 각 배열에는 null값 저장됨
name[0] = "Kim";
name[1] = "Park";

String[] name = {"Kim","Park"};

[[ 2차원 배열 ]]

int [][] arr = new int[][]{{1,2,3}, {4,5,6}};
int [][] arr = {
                {1,2,3}, 
                {4,5,6}
                };

  ex)int[][] score = {
                      {100,100,1000},
                      {20,20,20},
                      {30,30,30};
                      (40,40,40};
                     };
     for( int i = 0 ;i < score.length; i++) //score.length : 행의 갯수(4)
         for(int j = 0 ;j<score[i].length; j++) //score[i].length : 열의 갯수(3)
             System.out.printf("score[%d][%d] = %d",i,j,score[i][j]);
 
 [[ String클래스 ]]
   - char[](문자열 배열) 와 메서드(기능)를 결합한 것
   - 문자열 배열을 쓰는 것 보다 String 클래스를 사용하는 것이 더 편리함
   - String클래스는 내용을 변경할 수 없다(read only)
      ex) String a = "a"; String b = "b"; a = a+b; //문자열"ab"출력, a에 그냥 새로운 문자열이 만들어짐(주소 변경)
   
   <주요 메서드>
   - char charAt(int index) : 문자열에서 해당위치(index)에 있는 문자를 반환한다.
       ex) String str = "ABCDE"; char ch = str.charAt(3); // D를 ch에 저장
       
   - int length() : 문자열의 길이 반환
       ex) str.length() == 5
       
   - String substring(int from, int to) : 문자열에서 해당 범위(from~to)의 문자열을 반환, to는 포함X
       ex) String str = "012345";
           String tmp = str.substring(1,4); //"123"출력
           
   - boolean equals(Object obj) : 문자열의 내용이 같은지 확인(==사용X) 같으면 true, 다르면 false
      ex) Arrays.equals(str2D,str2D2); //1차원 배열 비교 (false)
      
   - boolean deepEquals(Object obj);
      ex) Arrays.deepEquals(str2D,str2D2); //2차원 이상 배열 비교 (true)
   
   - char[] toCharArray() : 문자열(String) -> 문자 배열(char[])
     ex) String str = "helloword";
         char[] arr = str.toCharArray();
   - char[] toString() : 1차원 배열 출력
      ex) System.out.println(Arrays.toString(arr)); // 1차원 배열 출력 [0,1,2,3,4]
   
   - char[][] deepToString() : 2차원 배열 출력
      ex) System.out.println(Arrays.deepToString(arr2D)); //2차원이상 배열 출력 [[11,22],[21,22]]
   
   - copyOf(배열, 복사할 배열 갯수), copyOfRange(배열, from, to) : 배열 복사
      ex) int [] arr = {0,1,2,3,4};
          int [] arr2 = Arrays.copyOf(arr, 2); // arr2 = [0,1] (앞에서부터 2개)
          int [] arr5 = Arrays.copyOfRange(arr,2,4); // arr5 = [2,3] (4는 포함X)
          
   - sort() : 배열 정렬
      ex) int[] arr = {3,2,0,1,4};
          Arrays.sort(arr);
          System.out.println(Arrays.toString(arr)); // [0,1,2,3,4]
   
   
   
   
   
     
     
      
 
  
             
      




   
 
 
 
 
 
 
 
   
